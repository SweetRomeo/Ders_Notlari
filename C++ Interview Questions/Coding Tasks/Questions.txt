C++ ile Programlama Çalışma Soruları
1-) Kullanıcı Adı doğrulaması
Kendisine gönderilen kullanıcı adı yazısı için aşağıdaki koşullar sağlanacaktır:

1- Kullanıcı adı minimum 4 maksimum 25 karakterden oluşabilir.
2- Kullanıcı adı harf ile başlamalıdır.
3- Kullanıcı adı harf, sayı veya underscore(alttire(_))  karakteri içerebilir. Ancak başka karakter içeremez.
4- Kullanıcı adı underscore karakteri ile bitemez.

Fonksiyon kullanııcı adının geçerli olması durumunda "true" yazısı olmaması durumunda "false" yazısını döndürecektir.
Bu koşulların tamamını sağlayan UsernameValidation isimli fonksiyonu yazınız ve test ediniz.

2-) Faktöriyel 
Faktöriyel 1 sayısından başlayarak o sayıya kadar sayıların çarpımını ifade eden bir matematiksel gösterimdir. 
a-) Buna göre kendisine gönderilen sayının faktöriyelini hesaplayıp geri döndüren CalculateFactorial isimli fonksiyonu yazınız ve test ediniz.
b-) e sayısı: 
e = 1/0! + 1/1! + 1/2! + ......
seri toplamından elde edilen bir gerçek sayıdır. Buna göre e sayısını geri dönen getEulerNumber isimli fonksiyonu yazınız ve test ediniz.

3-) Letter Changes
Bu program fonksiyon:
- Bir yazı parametresi alacak ve karakterler alfabetik karakterler ise onları değiştirecek.
- Harf karakterleri değiştirilirken ingilizce alfabeye göre bir sonraki karakteri alacaktır.(Eğer alfabenin son karakteri ise bu durumda başa dönüşüm ilk karakter olarak alınacaktır. 
Örneğin karakter z ise a, b ise c olacaktır.)
- Harfler değiştirilirken son durumda elde edilen harfler "a", "e", "i", "o", "u" karakterlerinden herhangi biriyse bu durumda bu karakterler büyütülecektir. (Örneğin "a" karakteri "A" olacaktır.)

koşulları sağlayan LetterChanges isimli fonksiyonu yazınız ve test ediniz.

4-) Soru: BracketMatcher fonksiyonu parametre olarak string alan,
aç ve kapa parantez sayıları birbirine eşit olduğunda "1" yazısını
döndürürken, aç ve kapa parantezler birbirine eşit olmadığı durumda
ise "0" yazısını döndürecektir.
İstisna durumlar: eğer yazıda hiçbir parantez bulunmuyorsa bu durumda
gene "1" yazısı döndürülecektir.
Bazı örnek girişler:
Giriş: (hello (world))
Çıktı: 1
çünkü burada aç ve kapa parantezler birbirine eşittir.
Giriş: ((hello (world))
Çıktı: 0
çünkü açılan parantezlerle kapanan parantezler eşit değil.
Bu örneklere göre yukarıda açıklanan BracketMatcher fonksiyonunu yazınız ve test ediniz.

5-) Soru: MeanMode isimli fonksiyon kendisine gönderilen dizinin
moduyla ortalamasının eşit olup olmadığı kontrol
edicek. Eğer eşit ise bu durumda 1 eşit değilse
0 değişkenini döndürecektir. Bu açıklamalara göre MeanMode fonksiyonunu yazınız ve test ediniz.

6-) Soru: Dizinin elemanları eğer belirli bir ilişkiye göre artıyorsa bu artış iki farklı şekilde gerçekleşebilir.
Geometrik olarak veya Aritmetik olarak. Eğer artık geometrik bir şekilde gerçekleşiyorsa bu durumda elemanların kendisinden 
bir önce gelen elemanlara oranı her zaman sabittir. Ancak söz konusu olan aritmetik artış ise bu durumda elemanların kendisinden
önce gelen elemanlara olan farkları sabittir. Örneğin: [2, 4, 6, 8] dizisi bir aritmetik artış gösterirken (4 - 2 = 6 - 4 olduğu için) [2, 6, 18, 54] dizisi 
geometrik artış gösterir(6 / 2 = 18 / 6 olduğu için). 
Yukarıdaki açıklamalara göre kendisine gönderilen dizi Aritmetikse string olarak "Arithmetic", geometrik ise string olarak "Geometric", eğer bunların
ikisi de söz konusu değilse bu durumda -1 yazısını geri dönen ArithGeo isimli fonksiyonu yazınız ve test ediniz.

7-) Açıklama : Mutlu sayılar basamaklarının sayı değerlerinin kareleri toplamı 1'e eşit olan sayılar. Ancak bu toplamın 10 veya 10'dan büyük olması durumunda
o toplam için yeni bir toplam değeri elde edilir. Elde edilen toplam değeri tek basamaklı oluncaya kadar bu durum devam eder. Eğer tek basamaklı kaldığında elde edilen sayı 
1 ise bu durumda ancak buna mutlu sayı denilebilir. 

Yukarıdaki açıklamaya göre bir sayının mutlu sayı olup olmadığını geri döndüren isHappyNumber isimli fonksiyonu yazınız ve test ediniz.
Örneğin burada 5552, 2555 gibi sayılara için fonksiyon true değer dönecektir.

8-) UpperCamelCase standardı pek çok pek firmada fonksiyon isimlendirmelerinde kullanılan bir yöntemdir. 
Yukarıdaki açıklamaya göre kendisine gönderilen ve alfabetik karakterler hariç(boşluk karakteri(" "), alttire karakteri("_") veya özel karakterler) karakterlerle ayrılmış 
yazılardan bir UpperCamelCase yazısı geri döndüren toUpperCamelCase isimli fonksiyonu yazınız ve test ediniz. İşte bazı örnekler:
Giriş: "cats AND*Dogs-are Awesome"
Çıkış: CatsAndDogsAreAwesome

Giriş: "a b c d-e-f%g"
Çıkış: ABCDEFG

9-) OneDecremented fonksiyon bir yazı alacak ve sırasıyla gelen rakamlarda kaç adet rakamın bir önceki rakamın 1 azı olduğu hesaplayıp geri döndürecektir.
Örneğin eğer giriş "5655984" olduğu durumda geri dönüş değeri 2 olacaktır. Çünkü 9 dan sonra 8 ve 6 dan sonra 5 gelmiştir. 

10-) Kendisine gönderilen yazıda bulunan en uzun alfanümerik karakterlerden oluşan kelimeyi geri döndüren LongestWord isimli fonksiyonu yazınız ve test ediniz.
Örnek bazı girişler aşağıdaki gibidir:
Giriş: fun&%* time 
Çıktı: time
Çıktının time olmasının nedeni fun&%* kelimesi daha uzun olsa bile numara veya harflerinin uzunluğu olarak time yazısından daha uzun değildir. Bu sebeple time çıktısı elde 
edilir. 

11-) Her harfin ascii tablosunda bir değeri bulunmaktadır. Örneğin 65 sayı değeri aslında 'A' karakterinin Tablo değerini ifade etmektedir. Bu açıklamalara göre 
kendisine gönderilen yazıyı ascii tablo değerine göre dönüştüren ASCIIConversion isimli fonksiyonu yazınız ve test ediniz.
Örneğin:
Giriş: dog
Çıkış: 100111103
Bunun nedeni d = 100, o = 111 ve g = 103 olmasından kaynaklanmaktadır.

12-) Kendine gönderilen sayıya 1 den başlarak ardışık şekilde yazdıran fonksiyonu yazınız. 
    - Fonksiyonda 3 ile kalansız bölünebilen sayılar yerine Fizz
    - 5 ile kalansız bölünebilen sayıların yerine Buzz 
    - Hem 5 hem de 3 ile kalansız bölünebilen sayıların yerine de FizzBuzz basılacaktır. 
Örneğin klavyeden 16 girildiğinde ekran çıktısı aşağıdaki gibi olacaktır.
Girdi : 16
Çıktı : 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16

13-) Dash Insert
Have the function DashInsert(str) insert dashes ('-') between each two odd numbers in str. For example: if str is 454793 the output should be 4547-9-3. Don't count zero as an odd number.
Examples
Input: 99946
Output: 9-9-946
Input: 56730
Output: 567-30

14-) Dash Insert
Have the function DashInsert(str) insert dashes ('-') between each two odd numbers in str. For example: if str is 454793 the output should be 4547-9-3. Don't count zero as an odd number.
Examples
Input: 99946
Output: 9-9-946
Input: 56730
Output: 567-30

15-) Other products
Bu fonksiyon kendisine gönderilen dizinin tüm elemanlarının
çarpımını elde edip sırasıyla tüm elemanlarına bölümünü
bulup elde edilen sonuçların arasına "-" ekleyip bu yazıyı
geri döndürecek. Aşağıda bununla ilgili bazı örnekler verilmiştir:
Giriş: [1, 2, 3, 4, 5]
Çıktı: 120-60-40-30-24

Giriş: {3,1,2,6}
Çıktı: 12-36-18-6

Giriş: {1,4,3}
Çıktı: 12-3-4

16-) Basic Roman Numerals
Romen rakamları sırasıyla I = 1, V = 5, X = 10, L = 50,
C = 100, D = 500, M = 1000 şeklinde ifade edilir. I

17-) Three Numbers isimli fonksiyon bir string parametre alarak
kendisine gönderilen yazının her bir cümlesinde eşsiz
karakterler arayacak. Eğer cümlelerin hepsinde en az 3 tane eşşiz karakter(sayı) bulunuyorsa
fonksiyon bu durumda true döndürecektir. Ancak 3'ün altında eşsiz
karakter bulunduğu takdirde veya 3 eşsiz karakter olmasına karşın
bu karakterlerin yan yana olması durumunda false geri döndürecektir.
İşte bazı örnekler:
Giriş: "2hell6o3 wor6l7d2"
Çıktı: true(tüm cümlelerdeki eşsiz rakam karakterleri 3 ten fazla)
Giriş: "hell268o w6or2l4d"
Çıktı: false(her kelimede en az 3 eşsiz rakam var ancak bunların hepsi peş peşe)

18-) Hamming Distance
Kendisine gönderilen iki yazıdan ilkinde olup ikincisinde olmayanlarının
sayısını geri döndüren HammingDistance isimli fonksiyonu yazınız
ve test ediniz. Karakterlerin diğer yazının sadece içinde bulunması
değil aynı konumda olması durumunda ancak toplam etkilenmecektir.
Örneğin:
Giriş: {"codec", "coder"}
Çıktı: 1(çünkü ikinci yazıda c'nin olduğu yerde r karakteri var.)

19-) Third Greatest
Kendisine gönderilen string türünden elemanlardan oluşan bir
dizinin en büyük üçüncü elemanını geri döndüren thirdGreatest isimli fonksiyonu
yaınız ve test ediniz.
Not: Büyüklük yazı uzunluğuna göre olacaktır. Lexi. compare kullanılmayacaktır. 

20-) Kendisine gönderilen cümledeki kelimelerden en çok tekrar
eden karaktere sahip olan yazıyı geri döndüren LetterCount
isimli fonksiyonu yazınız ve test ediniz. Program tekrar
eden karakter içermeyen durumlarda -1 döndürecektir.                          
Giriş: Hello world
Çıktı: Hello
Giriş: No words
Çıktı: -1

21-) Even Pairs
Hide Question
Have the function EvenPairs(str) take the str parameter
 being passed and determine if a pair of adjacent even
 numbers exists anywhere in the string. If a pair exists,
 return the string true, otherwise return false. For example:
 if str is "f178svg3k19k46" then there are two even numbers at the
 end of the string, "46" so your program should return the string true.
 Another example: if str is "7r5gg812" then the pair is "812" (8 and 12)
 so your program should return the string true.

22-) LargestFour
Kendisine gönderilen dizinin en büyük 4 elemanının
toplamını geri döndüren LargestFour isimli fonkisyonu yazınız ve
test ediniz.

23-) Bitwise Two
Kendisine gönderilen iki yazıya sahip olan dizilerin
elemanlarının birer birer bitsel ve işlemine sokarak
sonucu döndüren Bitwisetwo isimli fonksiyonu yazınız
ve test ediniz.

24-) StarRating
Kendisine gönderilen yazı şeklinde yıldız reyting değerine
bağlı aşağıdaki yazıları döndüren StarRating isimli fonksiyonu
yazınız ve test ediniz.
- Reyting minimum 0.00 maksimum 5.00 şeklinde olacaktır.
- Reyting yazısı 5 ana bölümden oluşacak ve bu yazı tipi
boş olan yıldızlar için "empty", bir kısmı boş olan yıldızlar
içim "half" ve tamamı dolu olan yıldızlar için "full" yazısı
olarak ifade edilecektir.
- Bir yıldızın "half" olması için noktadan sonraki kısmının
0.1 den büyük ve 0.75 ten küçük olması gerekmektedir.
- 0.1'den küçük olan yıldızlar empty olarak sayılırken
0.75 ten büyük olan yıldızlar full sayılacaktır.
İşte bazı örnekler:
Giriş: "0.38"
Çıktı: half empty empty empty empty
Çıktı: "1.02"
Çıktı: full empty empty empty empty
Giriş: "4.5"
Çıktı: full full full full half

25-) CaesarCipher
Kendisine gönderilen yazıya ve sayıya göre yazının alfabetik
karakterlerini kendisine gönderilen sayı kadar alfabede ileri
götürüp o karakter ile değiştiren CaesarCipher isimli fonksiyonu
yazınız ve test ediniz.
Not: karakter alfabenin sonunu aştığı takdirde baştan başlayarak
gidilmektedir. Örneğin karakter z karakteri ve 2 adım kaydırma
yapılacaksa b karakteri elde edilecektir.

Not2: Karakter değiştirilken karakterin büyüklük küçüklüğü
değiştirilmeli ayrıca alfabetik olmayan karakterler değiştirilmeyecektir.

26-) Word Split
Kendisine gönderilen iki yazıdan ikincinin içerisinde bulunan
yazıların kombinasyonundan ilk yazıyı elde edebiliyorsa
bu durumda o yazıları aralarında virgülle birlikte döndüren
WordSplit isimli fonksiyonu yazınız. Fonksiyon ilk yazının
elde edilememesi durumunda "not possiible" yazısını döndürecektir.
Bazı örnek girişler aşağıdaki gibidir:
Giriş : {"hellocat", "apple,bat,cat,goodbye,hello,yellow,why"}
Çıktı : base,ball
Giriş : {"abcgefd", "a,ab,abc,abcg,b,c,dog,e,efd,zzzz"}
Çıktı : abcg,efd
Giriş: {"hellocat", "apple,bat,cat,goodbye,hello,yellow,why"}

27-) ArrayAdditionI
Fonksiyon kendisine gönderilen dizinin en büyük elemanın
diğer herhangi eleman toplamıyla elde edilip edilemeyeceğini
inceleyecektir. Fonksiyon elde edilebilmesi durumunda
true edilememesi durumunda false döndürecektir.

28-) MultiplicativePersistence
Kendisine gönderilen int türünden bir sayının basamaklarının
çarpımlarını tek basamaklı olana kadar hesaplayıp tek
basamaklı hale kaç adımda geldiğini geri döndüren MultiplicativePersistence
isimli fonksiyonu yazınız ve test ediniz.
Giriş: 39
Çıktı: 3(3 * 9 = 27 => 2 * 7 = 14 => 1 * 4 = 0)
3 aşamada 4(tek basamaklı sayı) elde edildi.
Giriş: 25
Çıktı: 2(2 * 5 = 10 => 1 * 0 = 0)

29-) AdditivePersistence
Kendisine gönderilen int türden bir sayının
rakamları toplamını sayı tek basamaklı hale gelene
kadar hesaplayıp, bu işlemin kaç adımda yapıldığını
geri döndüren AdditivePersistence isimli fonksiyonu
yazınız ve test ediniz.
Giriş: 2718
Çıktı: 2(2 + 7 + 1 + 8 = 18 => 1 + 8 = 9
bu operasyon iki adımda gerçekleştiği için 2)

30-) GCF
Kendisine gönderilen iki elemanlı bir dizinin
elemanlarının en büyük ortak çarpanını geri döndüren
GCF fonksiyonunu yazınız ve test ediniz.
Giriş: {45, 12}
Çıktı: 3(en büyük ortak çarpanları 3)

31-) DistinctCharacters
Kendisine gönderilen string türünden bir yazının içerisinde
eşsiz karakter sayısını bulup, eğer eşsiz karakter sayısı
en az 10 ise true yazısını eğer 10'dan küçük ise false yazısını
geri döndüren DistinctCharacters isimli fonksiyonu yazınız ve test
ediniz.
Giriş: 12334bbmma:=6
Çıktı: true(10 adet eşsiz karakter var.)
Giriş: eeeemmmmmmmmm1000
Çıktı: false(10'dan az eşsiz karakter var.)
Giriş: abc123kkmmmm?
Çıktı: false(10'dan az eşsiz karakter var.)

32-) Closest Enemy
Kendisine gönderilen int türünden aşağıdaki
açıklamaya göre bir int türünden değer döndürecektir:
- Dizi yaşmızca 0,1 ve 2 rakamlarından oluşacaktır.
- Dizi içerisinde 1 tek bir tane olucak ve kişinin konumunu
belirtecek.
- Dizi içerisindeki 0 lar boşluk anlamına gelmektedir.
- Dizi içerisindeki 2 ler ise düşmanı belirtmektedir.
Buna göre fonksiyon 1 sayısına en yakın olan 2 rakamına
olan uzaklığı geri döndürecektir. Fonksiyon 2 hiç olmaması
durumunda 0 döndürecektir. Örneğin:
Giriş: {0, 1, 0}
Çıktı: 0
Giriş: {0, 0, 1, 0, 0, 2, 0, 2}
Çıktı: 3
Giriş: {1, 0, 0, 0, 2, 2, 0, 0}
Çıktı: 4

33-) Number Stream
Have the function NumberStream(str) take the str parameter being passed
which will contain the numbers 2 through 9, and determine if there is
a consecutive stream of digits of at least N length where N is the actual
digit value. If so, return the string true, otherwise return the string false.
For example: if str is "6539923335" then your program should return the string true because
there is a consecutive stream of 3's of length 3. The input string will always contain at least one digit.

34-) String Merge
Kendisine gönderilen string türden yazının yıldız ile ayrılmış iki yazıya
bölüp elemanlarını sırayla ekleyerek birleştirip oluşan yazıyı
geri döndüren StringMerge isimli fonksiyonu yazınız ve test ediniz.

35-) Group Totals
Kendisine gönderilen string türden koordinat elemanlarına sahip olan
toplam koordinat değeri 0 dan büyük olan elemanlar toplamını aralarında virgül olacak
şekilde geri döndüren GroupTotals isimli fonksiyonu yazınız
ve test ediniz. Aşağıdaki bunla ilgili örnek girişler verilmiştir:
Giriş: {"X:-1", "Y:1", "X:-4", "B:3", "X:5"}
Çıktı: B:3,Y:1
Giriş: {"P:6", "PI:1396", "PI:20", "P:-3"}
Çıktı: P:3,PI:1416

36-) Fibonacci Checker
Fibonacci serisi 1 1 2 3 5 8 13... şeklinde devam eden
bir seridir. FibonacciChecker fonksiyonu kendisine gönderilen
sayının bir fibonacci sayısına eşit olup olmadığını göre
yes veya no yazısını geri döndüren fonksiyonu yazınız ve test ediniz.
Giriş: 1
Çıktı: yes
Giriş: 5
Çıktı: yes
Giriş: 112
Çıktı: no

37-) Overlapping Ranges
Kendisine gönderilen 5 elemanlı bir dizinin ilk iki elemanındaki
range ile 3. ve 4. elemanları arasındaki range değerlerinden
ortak olanlarını alıp bunun son elemana en azından eşit olması
durumunda true döndürecektir. Örneğin dizi [4, 10, 2, 6, 3]
şeklinde olsun burada 4-10 aralığında: 4,5,6,7,8,9 ve 10
saıyları bulunmaktadır. diğer taraftan 2-6 aralığında ise
2,3,4,5 ve 6 sayıları bulunmaktadır. Bu iki aralığın ortak
elemanlarının sayısı en fazla son eleman kadar olması gerekmektedir.
Burada bu eleman sayısı 4,5 ve 6 olmak üzere 3 adettir. Bu da son elemana
eşit olduğundan sonuç true olarak döner. Aşağı buna benzer 2 örnek daha verilmiştir:
Giriş: {5,11,1,5,1}
Çıktı: true
Giriş: {1,8,2,4,4}
Çıktı: false

38-) Rectangle Area
Kendisine gönderilen 4 adet koordinatı verilen dörtgenin alanını
hesaplayan rectangeArea isimli fonksiyonu yazınız ve test ediniz.
Giriş: ["(0 0)", "(3 0)", "(0 2)", "(3 2)"]
Çıktı: 6

39-) Number Search
NumberSearch(str) fonksiyonunu yazın. Bu fonksiyon, str
 parametresindeki tüm sayıları bulmalı, bunları toplayıp
 ardından bu toplamı, metindeki harflerin sayısına bölerek
 sonucu döndürmelidir. Örneğin: eğer str "Hello6 9World 2, Nic8e D7ay!"
 ise, çıktı 2 olmalıdır. İlk olarak tüm sayıları topladığımızda,
 6 + 9 + 2 + 8 + 7 = 32 elde ederiz. Ardından metinde 17 harf vardır.
 32 / 17 = 1.882 sonucunu elde ederiz ve bu sonuç en yakın tam sayıya
 yuvarlandığında cevap 2 olur. Metin boyunca yalnızca boşluklarla ayrılmış
tek haneli sayılar kullanılacaktır (Bu nedenle hello44444 world gibi bir durum olmayacaktır).
Her string'de en az bir harf bulunacaktır.
Giriş: "Hello6 9World 2, Nic8e D7ay!"
Çıktı: 2

40-) Array Addition
Dizideki herhangi bir sayı kombinasyonu (en büyük sayı hariç)
dizideki en büyük sayıya eşit olacak şekilde toplanabiliyorsa,
ArrayAddition(arr) işlevinin arrr'da saklanan sayı dizisini
almasını ve dizeyi true döndürmesini sağlayın. aksi takdirde
diziyi false döndürür. Örneğin: eğer arr [4, 6, 23, 10, 1, 3]
içeriyorsa çıktı true döndürmelidir çünkü 4 + 6 + 10 + 3 = 23.
Dizi boş olmayacak, aynı öğelerin tümünü içermeyecek ve negatif sayılar içerebilir.
Örneğin:
Giriş: {5,7,16,1,2}
Çıktı: false
Giriş: {3,5,-1,8,12}
Çıktı: true

41-) Coin Determiner
kendisine gönderilen 1-250 arası bir sayıyı belli
değerlere sahip olan(1,5,7,9,11) paralardan minimum kaç tane kullanılarak
elde edilebileceği geri döndüren CoinDeterminer isimli fonksiyonu yazınız
ve test ediniz. Örneğin:
Giriş: 25
Çıktı: 3(çünkü 25 -> 11, 9 ve 5)
Giriş: 16
Çıktı: 2(16 -> 11 + 5)

42-) Dash InsertII
Kendisine gönderilen long türden bir sayıda eğer ard arda
gelen rakamların ikisi de tek ise aralarına kısa çizgi('-')
karakterini, eğer ikisi de çift ise asteriks karakterini('*')
ekleyen DashInsertII isimli fonksiyonu yazınız ve test ediniz.
Fonksiyon sayılardan herhangi birinin 0 olması durumunda veya
birinin tek birinin çift olması durumunda aralarına herhangi bir karakter eklemiycektir.
Bazı örnek çıktılar aşağıdaki gibidir:
Giriş: 99946
Çıktı: 9-9-94*6
Giriş: 56647304
Çıktı: 56*6*47-304

43-) Shortest Path

ShortestPath(strArr) fonksiyonunu yazın. Bu fonksiyon, bir döngü içermeyen bir grafiği modelleyen bir dizi dizeyi (strArr) girdi olarak alacaktır. Dizinin yapısı şu şekilde olacaktır: Dizideki ilk eleman dizideki düğüm sayısı N (noktalar) olacaktır. Bu değer bir dize olarak gelecektir. Sonraki N eleman düğümleri temsil edecek ve bunlar herhangi bir şey olabilir (A, B, C .. Brick Street, Main Street vb.). Daha sonra N. elemandan sonra, dizideki geri kalan elemanlar düğümler arasındaki bağlantıları gösterecektir. Bağlantılar şu şekilde görünecektir: (A-B, B-C .. Brick Street-Main Street vb.). Bununla birlikte, hiç bağlantı bulunmayabilir.

strArr için bir örnek: ["4", "A", "B", "C", "D", "A-B", "B-D", "B-C", "C-D"]. Programınız, dizideki ilk düğümden son düğüme kadar en kısa yolu, tire işaretleriyle ayırarak döndürmelidir. Yukarıdaki örnekte, çıktı A-B-D olmalıdır. İşte başka bir örnek: ["7", "A", "B", "C", "D", "E", "F", "G", "A-B", "A-E", "B-C", "C-D", "D-F", "E-D", "F-G"]. Bu dizi için çıktı A-E-D-F-G olmalıdır. Dizi için her zaman yalnızca bir tane en kısa yol olacaktır. Eğer ilk ve son düğüm arasında herhangi bir yol yoksa, -1 döndürün. Dizi en az iki düğüme sahip olacaktır. Ayrıca, örneğin A-B bağlantısı Anın Bye ve Bnin de Aya ulaşabileceği anlamına gelir.

Örnekler

Girdi: {"5", "A", "B", "C", "D", "F", "A-B", "A-C", "B-C", "C-D", "D-F"}
Çıktı: A-C-D-F

Girdi: {"4", "X", "Y", "Z", "W", "X-Y", "Y-Z", "X-W"}
Çıktı: X-W
Çözüm:
#include <iostream>
#include <string>
#include <queue>
#include <unordered_map>
#include <sstream>
#include <vector>
#include <algorithm>

using namespace std;

string ShortestPath(string strArr[], int arrLength) {
    int N = stoi(strArr[0]); // İlk eleman düğüm sayısıdır
    vector<string> nodes(strArr + 1, strArr + 1 + N); // Düğümleri alırız
    unordered_map<string, vector<string>> graph; // Grafiği saklayacağımız map
    
    // Bağlantıları okuyup grafiği oluşturuyoruz
    for (int i = N + 1; i < arrLength; ++i) {
        string edge = strArr[i];
        size_t pos = edge.find("-");
        string node1 = edge.substr(0, pos);
        string node2 = edge.substr(pos + 1);
        graph[node1].push_back(node2);
        graph[node2].push_back(node1);
    }

    // BFS (Genişlik Öncelikli Arama) kullanarak en kısa yolu buluyoruz
    unordered_map<string, string> parent; // Yol takibi için parent map'i
    queue<string> q;
    q.push(nodes[0]);
    parent[nodes[0]] = ""; // Başlangıç düğümü için parent yok

    while (!q.empty()) {
        string current = q.front();
        q.pop();

        if (current == nodes.back()) { // Son düğüme ulaşırsak
            vector<string> path;
            while (!current.empty()) {
                path.push_back(current);
                current = parent[current];
            }
            reverse(path.begin(), path.end()); // En kısa yolu ters çeviriyoruz
            stringstream result;
            for (int i = 0; i < path.size(); ++i) {
                result << path[i];
                if (i < path.size() - 1) result << "-";
            }
            return result.str();
        }

        for (string neighbor : graph[current]) {
            if (parent.find(neighbor) == parent.end()) {
                parent[neighbor] = current;
                q.push(neighbor);
            }
        }
    }

    // Eğer son düğüme ulaşılamıyorsa -1 döndür
    return "-1";
}

int main(void) { 
   
  // keep this function call here
  string A[] = coderbyteInternalStdinFunction(stdin);
  int arrLength = sizeof(A) / sizeof(*A);
  cout << ShortestPath(A, arrLength);
  return 0;
    
}
//--------------------------------------------------------------
