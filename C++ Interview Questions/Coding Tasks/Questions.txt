C++ ile Programlama Çalışma Soruları
1-) Kullanıcı Adı doğrulaması
Kendisine gönderilen kullanıcı adı yazısı için aşağıdaki koşullar sağlanacaktır:

1- Kullanıcı adı minimum 4 maksimum 25 karakterden oluşabilir.
2- Kullanıcı adı harf ile başlamalıdır.
3- Kullanıcı adı harf, sayı veya underscore(alttire(_))  karakteri içerebilir. Ancak başka karakter içeremez.
4- Kullanıcı adı underscore karakteri ile bitemez.

Fonksiyon kullanııcı adının geçerli olması durumunda "true" yazısı olmaması durumunda "false" yazısını döndürecektir.
Bu koşulların tamamını sağlayan UsernameValidation isimli fonksiyonu yazınız ve test ediniz.

2-) Faktöriyel 
Faktöriyel 1 sayısından başlayarak o sayıya kadar sayıların çarpımını ifade eden bir matematiksel gösterimdir. 
a-) Buna göre kendisine gönderilen sayının faktöriyelini hesaplayıp geri döndüren CalculateFactorial isimli fonksiyonu yazınız ve test ediniz.
b-) e sayısı: 
e = 1/0! + 1/1! + 1/2! + ......
seri toplamından elde edilen bir gerçek sayıdır. Buna göre e sayısını geri dönen getEulerNumber isimli fonksiyonu yazınız ve test ediniz.

3-) Letter Changes
Bu program fonksiyon:
- Bir yazı parametresi alacak ve karakterler alfabetik karakterler ise onları değiştirecek.
- Harf karakterleri değiştirilirken ingilizce alfabeye göre bir sonraki karakteri alacaktır.(Eğer alfabenin son karakteri ise bu durumda başa dönüşüm ilk karakter olarak alınacaktır. 
Örneğin karakter z ise a, b ise c olacaktır.)
- Harfler değiştirilirken son durumda elde edilen harfler "a", "e", "i", "o", "u" karakterlerinden herhangi biriyse bu durumda bu karakterler büyütülecektir. (Örneğin "a" karakteri "A" olacaktır.)

koşulları sağlayan LetterChanges isimli fonksiyonu yazınız ve test ediniz.

4-) Soru: BracketMatcher fonksiyonu parametre olarak string alan,
aç ve kapa parantez sayıları birbirine eşit olduğunda "1" yazısını
döndürürken, aç ve kapa parantezler birbirine eşit olmadığı durumda
ise "0" yazısını döndürecektir.
İstisna durumlar: eğer yazıda hiçbir parantez bulunmuyorsa bu durumda
gene "1" yazısı döndürülecektir.
Bazı örnek girişler:
Giriş: (hello (world))
Çıktı: 1
çünkü burada aç ve kapa parantezler birbirine eşittir.
Giriş: ((hello (world))
Çıktı: 0
çünkü açılan parantezlerle kapanan parantezler eşit değil.
Bu örneklere göre yukarıda açıklanan BracketMatcher fonksiyonunu yazınız ve test ediniz.

5-) Soru: MeanMode isimli fonksiyon kendisine gönderilen dizinin
moduyla ortalamasının eşit olup olmadığı kontrol
edicek. Eğer eşit ise bu durumda 1 eşit değilse
0 değişkenini döndürecektir. Bu açıklamalara göre MeanMode fonksiyonunu yazınız ve test ediniz.

6-) Soru: Dizinin elemanları eğer belirli bir ilişkiye göre artıyorsa bu artış iki farklı şekilde gerçekleşebilir.
Geometrik olarak veya Aritmetik olarak. Eğer artık geometrik bir şekilde gerçekleşiyorsa bu durumda elemanların kendisinden 
bir önce gelen elemanlara oranı her zaman sabittir. Ancak söz konusu olan aritmetik artış ise bu durumda elemanların kendisinden
önce gelen elemanlara olan farkları sabittir. Örneğin: [2, 4, 6, 8] dizisi bir aritmetik artış gösterirken (4 - 2 = 6 - 4 olduğu için) [2, 6, 18, 54] dizisi 
geometrik artış gösterir(6 / 2 = 18 / 6 olduğu için). 
Yukarıdaki açıklamalara göre kendisine gönderilen dizi Aritmetikse string olarak "Arithmetic", geometrik ise string olarak "Geometric", eğer bunların
ikisi de söz konusu değilse bu durumda -1 yazısını geri dönen ArithGeo isimli fonksiyonu yazınız ve test ediniz.

7-) Açıklama : Mutlu sayılar basamaklarının sayı değerlerinin kareleri toplamı 1'e eşit olan sayılar. Ancak bu toplamın 10 veya 10'dan büyük olması durumunda
o toplam için yeni bir toplam değeri elde edilir. Elde edilen toplam değeri tek basamaklı oluncaya kadar bu durum devam eder. Eğer tek basamaklı kaldığında elde edilen sayı 
1 ise bu durumda ancak buna mutlu sayı denilebilir. 

Yukarıdaki açıklamaya göre bir sayının mutlu sayı olup olmadığını geri döndüren isHappyNumber isimli fonksiyonu yazınız ve test ediniz.
Örneğin burada 5552, 2555 gibi sayılara için fonksiyon true değer dönecektir.

8-) UpperCamelCase standardı pek çok pek firmada fonksiyon isimlendirmelerinde kullanılan bir yöntemdir. 
Yukarıdaki açıklamaya göre kendisine gönderilen ve alfabetik karakterler hariç(boşluk karakteri(" "), alttire karakteri("_") veya özel karakterler) karakterlerle ayrılmış 
yazılardan bir UpperCamelCase yazısı geri döndüren toUpperCamelCase isimli fonksiyonu yazınız ve test ediniz. İşte bazı örnekler:
Giriş: "cats AND*Dogs-are Awesome"
Çıkış: CatsAndDogsAreAwesome

Giriş: "a b c d-e-f%g"
Çıkış: ABCDEFG

9-) OneDecremented fonksiyon bir yazı alacak ve sırasıyla gelen rakamlarda kaç adet rakamın bir önceki rakamın 1 azı olduğu hesaplayıp geri döndürecektir.
Örneğin eğer giriş "5655984" olduğu durumda geri dönüş değeri 2 olacaktır. Çünkü 9 dan sonra 8 ve 6 dan sonra 5 gelmiştir. 

10-) Kendisine gönderilen yazıda bulunan en uzun alfanümerik karakterlerden oluşan kelimeyi geri döndüren LongestWord isimli fonksiyonu yazınız ve test ediniz.
Örnek bazı girişler aşağıdaki gibidir:
Giriş: fun&%* time 
Çıktı: time
Çıktının time olmasının nedeni fun&%* kelimesi daha uzun olsa bile numara veya harflerinin uzunluğu olarak time yazısından daha uzun değildir. Bu sebeple time çıktısı elde 
edilir. 

11-) Her harfin ascii tablosunda bir değeri bulunmaktadır. Örneğin 65 sayı değeri aslında 'A' karakterinin Tablo değerini ifade etmektedir. Bu açıklamalara göre 
kendisine gönderilen yazıyı ascii tablo değerine göre dönüştüren ASCIIConversion isimli fonksiyonu yazınız ve test ediniz.
Örneğin:
Giriş: dog
Çıkış: 100111103
Bunun nedeni d = 100, o = 111 ve g = 103 olmasından kaynaklanmaktadır.

12-) Kendine gönderilen sayıya 1 den başlarak ardışık şekilde yazdıran fonksiyonu yazınız. 
    - Fonksiyonda 3 ile kalansız bölünebilen sayılar yerine Fizz
    - 5 ile kalansız bölünebilen sayıların yerine Buzz 
    - Hem 5 hem de 3 ile kalansız bölünebilen sayıların yerine de FizzBuzz basılacaktır. 
Örneğin klavyeden 16 girildiğinde ekran çıktısı aşağıdaki gibi olacaktır.
Girdi : 16
Çıktı : 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16

13-) Dash Insert
Have the function DashInsert(str) insert dashes ('-') between each two odd numbers in str. For example: if str is 454793 the output should be 4547-9-3. Don't count zero as an odd number.
Examples
Input: 99946
Output: 9-9-946
Input: 56730
Output: 567-30

14-) 13-) Dash Insert
Have the function DashInsert(str) insert dashes ('-') between each two odd numbers in str. For example: if str is 454793 the output should be 4547-9-3. Don't count zero as an odd number.
Examples
Input: 99946
Output: 9-9-946
Input: 56730
Output: 567-30

15-) Other products
Bu fonksiyon kendisine gönderilen dizinin tüm elemanlarının
çarpımını elde edip sırasıyla tüm elemanlarına bölümünü
bulup elde edilen sonuçların arasına "-" ekleyip bu yazıyı
geri döndürecek. Aşağıda bununla ilgili bazı örnekler verilmiştir:
Giriş: [1, 2, 3, 4, 5]
Çıktı: 120-60-40-30-24

Giriş: {3,1,2,6}
Çıktı: 12-36-18-6

Giriş: {1,4,3}
Çıktı: 12-3-4

16-) Basic Roman Numerals
Romen rakamları sırasıyla I = 1, V = 5, X = 10, L = 50,
C = 100, D = 500, M = 1000 şeklinde ifade edilir. I

17-) Three Numbers isimli fonksiyon bir string parametre alarak
kendisine gönderilen yazının her bir cümlesinde eşsiz
karakterler arayacak. Eğer cümlelerin hepsinde en az 3 tane eşşiz karakter(sayı) bulunuyorsa
fonksiyon bu durumda true döndürecektir. Ancak 3'ün altında eşsiz
karakter bulunduğu takdirde veya 3 eşsiz karakter olmasına karşın
bu karakterlerin yan yana olması durumunda false geri döndürecektir.
İşte bazı örnekler:
Giriş: "2hell6o3 wor6l7d2"
Çıktı: true(tüm cümlelerdeki eşsiz rakam karakterleri 3 ten fazla)
Giriş: "hell268o w6or2l4d"
Çıktı: false(her kelimede en az 3 eşsiz rakam var ancak bunların hepsi peş peşe)

18-) Hamming Distance
Kendisine gönderilen iki yazıdan ilkinde olup ikincisinde olmayanlarının
sayısını geri döndüren HammingDistance isimli fonksiyonu yazınız
ve test ediniz. Karakterlerin diğer yazının sadece içinde bulunması
değil aynı konumda olması durumunda ancak toplam etkilenmecektir.
Örneğin:
Giriş: {"codec", "coder"}
Çıktı: 1(çünkü ikinci yazıda c'nin olduğu yerde r karakteri var.)

19-) Third Greatest
Kendisine gönderilen string türünden elemanlardan oluşan bir
dizinin en büyük üçüncü elemanını geri döndüren thirdGreatest isimli fonksiyonu
yaınız ve test ediniz.
Not: Büyüklük yazı uzunluğuna göre olacaktır. Lexi. compare kullanılmayacaktır. 
